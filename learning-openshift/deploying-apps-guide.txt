after login , create a new project with command:
     oc new-project stackroute-project --display-name 'Stackroute Project'

now switch to project with 
    oc project

to get all resources :
    oc get all

to check to which account we have logged in :
    oc whoami

now start deploying the application:

    to create a deployment descriptor for out app and see in console:
        oc run --image=ashu1019/demo-spring-app-image:latest demo-spring-app --dry-run -o yaml

    to write the yaml file in some file :
        oc run --image=ashu1019/demo-spring-app-image:latest demo-spring-app --dry-run -o yaml >> demo-spring-deployment.yaml
    
    to create the pods :
        oc create -f demo-spring-deployment.yaml

    to verify the resources:
        oc get all 

    to get details about any pod :
        oc describe pod "pod name"
    
    to get logs :
        oc logs "pod name"

=================================

Diff between deployment config and service:

    with deployment config we can say we need 5-10 instances of following pod and it will provide us the same

   services are required for internal traffic while routes are required for external traffic

    to create /expose a service
        oc expose "podname" --port 8080
    eg
        oc expose deploymentconfigs/demo-spring-app --port 8080

    since its only accepts internal traffic we cant access it from outside.

    to see all running services :
        oc get services

    Display information about the Service:
        oc describe services demo-app
    
    to delete a service :
        oc delete services demo-app

    but if we want to expose this service over the inernet then
    we have four options :
        1. port-forwarding 
        2. NodePort
        3. services
        4. routes

    port-forwarding:
        we use this for testing of a service only :
            oc port-forward "name of the pod" 8080:8080
        eg
            oc port-forward demo-spring-app-1-8g68q 8080:8080

    NodePort:
        we can also route external traffic to the pods via NodePort:
            oc expose deploymentconfigs/demo-spring-app --type NodePort --port 8080
        
        now we can access the pod from outside via 
        node-ip:port
        (Note ask admin for the node-ip , since normal users dont have the access to outer clusters)
        admin get find the details with:
            oc get nodes
        
        to update the main yaml config file :
            oc expose deploymentconfig/demo-spring-app --type NodePort --port 8080 --dry-run -o yaml >> jenkins-deployment.yaml 

        now delete all the configs we have :
            oc delete all --all -n myproject
        then rerun the yaml file :
            oc create -f demo-spring-deployment.yaml
        it will create both the pod and the services


    Services:
        Create a service for an deployment, which serves on port 8080 and connects to the containers on port 8080
            oc expose deploymentconfig/demo-spring-app --port=8080 --target-port=8080 --name=demo-svc --type=LoadBalancer

        we can access the service from outside via :
            master/node ip : port 

        now
            oc get services
        you ll see the service of type load balancer and its ip and port 

    Route:

    now the last thing we need to do is to create the route
    but make sure service is already there.
        oc create route edge "name of the route" --service="service for which creating route"
    eg
        oc create route edge demo-spring-route --service=demo-spring-app

    check if the route is created :
        oc get routes
    now with the host name we can access this service over the network 

    quickly lets put this route information in our deployment config:
        oc create route edge demo-spring-route --service=demo-spring-app --dry-run -o yaml >> jenkins-deployment.yaml 
    
    delete all in myproject by 
        oc delete all --all -n myproject 
    and then create all by 
        oc create -f demo-spring-deployment.yaml


========================================

to delete all the evicted pods :
    kubectl delete pods --field-selector=status.phase!=Running

to force delete the pods stuck :
    oc delete pod/<name of pod> --grace-period=0

if it still get hanged then use --force :
    oc delete pod/ --grace-period=0 --force

===========================================

via gui:

The following service(s) have been created in your project: mongodb.

Username: root
Password: root
Database Name: sampledb
Connection URL: mongodb://root:root@mongodb/sampledb

===========================================

color codes for terminal :

    echo -ne '\e]10;#FDFEFE\e\\'  # set default foreground to white
    echo -ne '\e]11;#3358FF\e\\'  # set default background to blue

